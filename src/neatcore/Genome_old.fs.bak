namespace NeatCore

module Genome =
    open System
    open System.Data

    type NodeData =
        { InnovationNumber: int }

    type NodeGene =
        | Input of NodeData
        | Hidden of NodeData
        | Output of NodeData

    type ConnectionGene =
        { FromNode: NodeGene
          ToNode: NodeGene
          Weight: float
          IsEnabled: bool
          InnovationNumber: int }

    type GenomeData =
        { Nodes: NodeGene list
          Connections: ConnectionGene list }

    type Genome =
        | EvaluatedGenome of GenomeData * fitness: float
        | NonEvaluatedGenome of GenomeData

    // Mutation
    let MutateAddConnection random incr allConnections genome =
        let fromNode =
            genome.Nodes
            |> Seq.choose (fun x ->
                match x with
                | Input _ -> Some(x)
                | Hidden _ -> Some(x)
                | _ -> None)
            |> Seq.toList
            |> Util.shuffle
            |> Seq.head

        let toNode =
            let rec findCandidates nodeOfInterest connections nodes =
                // start with all nodes/connections
                // filter all nodes with no input
                let targets =
                    connections
                    |> List.map (fun c -> c.ToNode)
                    |> List.distinct

                let noInputs = nodes |> List.except targets

                // test if node of interest is in inputs
                match noInputs |> List.contains nodeOfInterest with
                | true ->
                    // if so return inputs minus node plus targets as candidates
                    noInputs
                    |> List.except [ nodeOfInterest ]
                    |> List.filter (function
                        | Output _ -> true
                        | Hidden _ -> true
                        | _ -> false)
                | false ->
                    // otherwise remove inputs and connections outgoing from inputs
                    let newNodes = nodes |> List.except noInputs
                    let newConnections =
                        connections
                        |> List.except (connections |> List.filter (fun x -> noInputs |> List.contains x.FromNode))
                    // recurse
                    findCandidates nodeOfInterest newConnections newNodes

            findCandidates fromNode genome.Connections genome.Nodes
            |> Util.shuffle
            |> Seq.head

        let innovationNumber =
            let foundConnection = allConnections |> Seq.tryFind (fun x -> fromNode = fromNode && toNode = toNode)
            match foundConnection with
            | Some c -> c.InnovationNumber
            | None -> incr()

        let randomWeight = random()

        let link =
            { FromNode = fromNode
              ToNode = toNode
              IsEnabled = true
              Weight = randomWeight
              InnovationNumber = innovationNumber }
        // Add link between two nodes
        // Weight is random -2 to 2
        // if connection exist already. use the innovationNumber
        { genome with Connections = link :: genome.Connections }

    let MutateAddNode random connIncr nodeIncr genome = // TODO: InnovationNumber generator
        let newNode = Hidden { InnovationNumber = nodeIncr() }

        let randomConnection =
            genome.Connections
            |> List.filter (fun x -> x.IsEnabled)
            |> Util.shuffle
            |> Seq.head
        let incomingConnection =
            { FromNode = randomConnection.FromNode
              ToNode = newNode
              IsEnabled = true
              InnovationNumber = connIncr()
              Weight = 1.0 }

        let outgoingConnection =
            { FromNode = newNode
              ToNode = randomConnection.ToNode
              IsEnabled = true
              InnovationNumber = connIncr()
              Weight = random() }

        let disabledConnection = { randomConnection with IsEnabled = false }

        let newConnections =
            disabledConnection
            :: incomingConnection :: outgoingConnection :: (genome.Connections |> List.except [ randomConnection ])

        // Add node to any random connection
        // disable connection add two new
        // incoming connection with weight 1
        // outgoing weight to the same as the old connection
        { genome with
              Connections = newConnections
              Nodes = newNode :: genome.Nodes }

    let MutateEnableDisableConnection genome =
        let randomConnection =
            genome.Connections
            |> Util.shuffle
            |> Seq.head
        // find a random connection and switch IsEnabled
        let newConnection = { randomConnection with IsEnabled = not randomConnection.IsEnabled }
        let newConnections = newConnection :: (genome.Connections |> List.except [ randomConnection ])
        { genome with Connections = newConnections }

    let MutateWeightShift random genome = // RANDOM 0 to 2
        let randomConnection =
            genome.Connections
            |> Util.shuffle
            |> Seq.head

        let randomNumber = random()
        // find a random connection and switch IsEnabled
        let newConnection = { randomConnection with Weight = randomConnection.Weight * randomNumber }
        let newConnections = newConnection :: (genome.Connections |> List.except [ randomConnection ])
        { genome with Connections = newConnections }
    // random weight multiplied by a number between 0 or 2

    let MutateWeightRandom random genome =
        let randomConnection =
            genome.Connections
            |> Util.shuffle
            |> Seq.head

        let randomNumber = random()
        // find a random connection and switch IsEnabled
        let newConnection = { randomConnection with Weight = randomNumber }
        let newConnections = newConnection :: (genome.Connections |> List.except [ randomConnection ])
        { genome with Connections = newConnections }
    // random weight set to random number between -2 and 2

    // Crossover
    let Cross moreFit lessFit = ""

    // Selection
    let MatchToSpecies = ""
